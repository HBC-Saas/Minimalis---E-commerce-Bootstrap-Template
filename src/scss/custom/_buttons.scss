/*
    Buttons
   ------------------------
*/

.btn {
  letter-spacing: $btn-letter-spacing;
  @include transition($btn-transition);
  &:not(.dropdown-toggle) {
    min-width: 10.625rem;
  }
}


// Alternate buttons
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $color, $value in $theme-colors {
      .btn#{$infix}-#{$color} {
        @include button-variant($value, $value);
      }
    }

    @each $color, $value in $theme-colors {
      .btn-outline#{$infix}-#{$color} {
        @include button-outline-variant($value);
      }
    }
  }
}

//button links with colors
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $color, $value in $theme-colors {
      .btn-link#{$infix}-#{$color} {
        color: $value;

        @include hover {
          color: $value;
          text-decoration: $link-hover-decoration;
        }

        &:focus,
        &.focus {
          color: $value;
        }

        &:disabled,
        &.disabled {
          pointer-events: none;
        }
      }
    }
  }
}

// hover outline buttons
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $color, $value in $theme-colors {
      .btn#{$infix}-#{$color} {
        &.hover-outline {
          @include hover() {
            background-color: transparent;
            color: $value;
          }

          &:not(:disabled):not(.disabled):active,
          &:not(:disabled):not(.disabled).active,
          .show > &.dropdown-toggle {
            color: $value;
            background-color: transparent;
          }

          &:disabled,
          &.disabled {
            pointer-events: none;
          }
        }
      }
    }
  }
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $color, $value in $theme-colors {
      .btn-minimalis#{$infix}-#{$color} {
        @include button-minimalis-variant($value, $value);
      }
    }

    @each $color, $value in $theme-colors {
      .btn-minimalis-outline#{$infix}-#{$color} {
        @include button-minimalis-outline-variant($value, $value);
      }
    }
  }
}

// button arrow style
.btn-arrow {
  text-align: left;
  .inner-btn {
    display: flex;
    flex-direction: row;
    align-items: center;
    .arrow {
      position: relative;
      display: inline-block;
      width: 3.75rem;
      height: 1rem;
      margin: 0 .625rem;
      flex-grow: 1;
      .arrow-icon {
        position: absolute;
        display: inline-block;
        width: .625rem;
        height: 1px;
        top: 50%;
        left: 0;
        @include transition($btn-transition);
        &:before, &:after {
          content: ' ';
          width: 60%;
          height: 100%;
          position: absolute;
          top: 0;
          right: -1px;
          transform: rotate(0deg);
          opacity: 0;
          visibility: hidden;
          @include transition($btn-transition);
        }
        &::before {
          top: -2px;
          right: -1px;
          transform: rotate(45deg);
        }
        &::after {
          top: 2px;
          right: -1px;
          transform: rotate(-45deg);
        }
      }
    }
  }

  &:not(.disabled):not(:disabled) {
    @include hover() {
      .arrow {
        .arrow-icon {
          left: 100%;
          &:before, &:after {
            opacity: 1;
            visibility: visible;
          }
        }
      }
    }
  }
}

// arrow background colors
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $color, $value in $theme-colors {
      .btn#{$infix}-#{$color} {
        &.btn-arrow {
          .arrow-icon {
            background-color: color-yiq($value);
            &:before, &:after { background-color: color-yiq($value); }
          }
        }
      }

      // minimalis effect
      .btn-minimalis#{$infix}-#{$color} {
        &.btn-arrow {
          .arrow-icon {
            background-color: color-yiq($value);
            &:before, &:after { background-color: color-yiq($value); }
          }

          @include hover() {
            .arrow-icon {
              background-color: $value;
              &:before, &:after {
                background-color: $value;
              }
            }
          }
        }
      }

      .btn-minimalis-outline#{$infix}-#{$color} {
        &.btn-arrow {
          .arrow-icon {
            background-color: $value;
            &:before, &:after { background-color: $value; }
          }

          @include hover() {
            .arrow-icon {
              background-color: color-yiq($value);
              &:before, &:after {
                background-color: color-yiq($value);
              }
            }
          }
        }
      }
    }
  }
}

// arrow link background colors
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $color, $value in $theme-colors {
      .btn-link#{$infix}-#{$color} {
        &.btn-arrow {
          .arrow-icon {
            background-color: $value;
            &:before, &:after { background-color: $value; }
          }
        }
      }
    }
  }
}

// arrow background colors hover-outline buttons
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $color, $value in $theme-colors {
      .btn#{$infix}-#{$color} {
        &.hover-outline {
          &.btn-arrow {
            @include hover() {
              .arrow-icon {
                background-color: $value;
                &:before, &:after { background-color: $value; }
              }
            }
          }
        }
      }
    }
  }
}

// arrow background colors for outline buttons
@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    &.btn-arrow {
      .arrow-icon {
        background-color: $value;
        &:before, &:after { background-color: $value; }
      }

      @include hover() {
        .arrow-icon {
          background-color: color-yiq($value);
          &:before, &:after { background-color: color-yiq($value); }
        }
      }

      &:disabled,
      &.disabled {
        pointer-events: none;
      }
    }
  }
}

// Social buttons
@each $color, $value in $social-colors {
  .btn-#{$color} {
    border: 1px solid $black;
    color: $black;
    text-align: left;

    @include hover() {
      background-color: $value;
      border-color: $value;
      color: $white;
      .text-#{$color} { color: $white; }
    }

    &:focus,
    &.focus {
      background-color: $value;
      border-color: $value;
      color: $white;
      .text-#{$color} { color: $white; }
    }

    &:disabled,
    &.disabled {
      pointer-events: none;
    }
  }
  .text-#{$color} { color: $value; }
  .text-#{$color} { color: $value; }
}

// Social buttons minimalis effect
@each $color, $value in $social-colors {
  .btn-minimalis-#{$color} {
    position: relative;
    border: 1px solid $black;
    color: $black;
    text-align: left;
    z-index: 1;

    &::before {
      content: ' ';
      position: absolute;
      top: 0;
      left: 0;
      width: 0;
      height: 100%;
      @include gradient-bg($value);
      z-index: -1;
      @include transition($btn-transition);
    }

    @include hover() {
      border: 1px solid $value;
      color: $white;
      .text-#{$color} { color: $white; }

      &::before { width: 100%; }
    }
  }
}

// circle and Add to cart BUTTONS
.btn-circle {
  background-color: $white;
  border: 3px solid $primary;
  height: 2.5rem;
  min-width: 2.5rem;
  border-radius: 1.5625rem;
  padding: 0;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  @include transition($btn-transition);

  // sizes
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      &.btn#{$infix}-large {
        height: 3.125rem;
        min-width: 3.125rem;
        .add-to-cart-hover {
          .add-to-cart-text {
            padding: 0 $btn-padding-x-lg;
          }
        }
      }

      &.btn#{$infix}-medium {
        height: 2.5rem;
        min-width: 2.5rem;
      }

      &.btn#{$infix}-small {
        height: 2.1875rem;
        min-width: 2.1875rem;
        .add-to-cart-hover {
          .add-to-cart-text {
            padding: 0 $btn-padding-x-sm;
          }
        }
      }
    }
  }

  .add-to-cart-active,
  .add-to-cart-success,
  .add-to-cart-hover {
    margin-bottom: 0;
    display: inline-block;
    opacity: 1;
    visibility: visible;
    @include transition($btn-transition);
  }
  .add-to-cart-active,
  .add-to-cart-success {
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
  }
  .add-to-cart-active {
    left: 50%;
  }
  .add-to-cart-success {
    opacity: 0;
    visibility: hidden;
    left: 100%;
  }
  .add-to-cart-hover {
    white-space: nowrap;
    width: 0;
    margin-left: 1.5rem;
    .add-to-cart-text {
      white-space: nowrap;
      padding: 0 $btn-padding-x;
    }
  }

  &:active,
  &:focus { outline: none; }

  /* hover */
  @include hover() {
    .add-to-cart-hover {
      margin-left: 0;
      opacity: 1;
      visibility: visible;
    }
    .add-to-cart-active,
    .add-to-cart-success {
      opacity: 0;
      visibility: hidden;
    }
    .add-to-cart-active { left: -100%; }
  }

  /* loading */
  &.loading,
  &.success {
    .add-to-cart-active,
    .add-to-cart-hover {
      opacity: 0;
      visibility: hidden;
      left: -100%;
      width: 0;
    }
    @include hover() {
      .add-to-cart-active,
      .add-to-cart-hover {
        opacity: 0;
        visibility: hidden;
        left: -100%;
        width: 0!important;
      }
    }
    &:not(.success) {
      border-left-color: darken($primary, 15%);
      animation: loadingRotate 1s ease .2s infinite;
    }
  }
  &.success {
    .add-to-cart-success {
      opacity: 1;
      visibility: visible;
      left: 50%;
    }
  }

  // button variant colors
  @each $color, $value in $theme-colors {
    &.btn-#{$color} {
      background-color: $white;
      border: 3px solid $value;
      color: $dark;

      &:active,
      &:focus {
        background-color: $white!important;
        color: $dark!important;
      }

      &.loading,
      &.success {
        &:not(.success) {
          border-left-color: darken($value, 12%);
        }
      }
    }
  }
  &.btn-dark {
    &.loading,
    &.success {
      &:not(.success) {
        border-left-color: lighten($dark, 25%);
      }
    }
  }
}

@keyframes loadingRotate {
  0% {
    transform: rotate(-360deg);
  }
}

//
.btn-hover-white {
  @include hover() {
    background-color: $white!important;
  }
}